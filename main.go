package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
)

var (
	// RDAP Server URL's
	// From https://about.rdap.org/
	DefaultServer = "https://rdap.org"
	CentralNic = "https://www.centralnic.com/registry/labs/rdap"
	VerisignDNRD = "http://dnrd.verisignlabs.com/dnrd-ap/help/"
	APNIC = "https://www.apnic.net/apnic-info/whois_search/about/rdap"
	ARIN = "https://www.arin.net/resources/whoisrws/"
	LACNIC = "http://restfulwhoisv2.labs.lacnic.net/restfulwhois/"
)

// type AutoGenerated struct {
// 	Net struct {
// 		Xmlns struct {
// 			Ns3           string `json:"ns3"`
// 			Ns2           string `json:"ns2"`
// 			NAMING_FAILED string `json:"$"`
// 		} `json:"@xmlns"`
// 		InaccuracyReportURL string `json:"@inaccuracyReportUrl"`
// 		TermsOfUse          string `json:"@termsOfUse"`
// 		RegistrationDate    struct {
// 			NAMING_FAILED string `json:"$"`
// 		} `json:"registrationDate"`
// 		Ref struct {
// 			NAMING_FAILED string `json:"$"`
// 		} `json:"ref"`
// 		EndAddress struct {
// 			NAMING_FAILED string `json:"$"`
// 		} `json:"endAddress"`
// 		Handle struct {
// 			NAMING_FAILED string `json:"$"`
// 		} `json:"handle"`
// 		Name struct {
// 			NAMING_FAILED string `json:"$"`
// 		} `json:"name"`
// 		NetBlocks struct {
// 			NetBlock struct {
// 				CidrLength struct {
// 					NAMING_FAILED string `json:"$"`
// 				} `json:"cidrLength"`
// 				EndAddress struct {
// 					NAMING_FAILED string `json:"$"`
// 				} `json:"endAddress"`
// 				Description struct {
// 					NAMING_FAILED string `json:"$"`
// 				} `json:"description"`
// 				Type struct {
// 					NAMING_FAILED string `json:"$"`
// 				} `json:"type"`
// 				StartAddress struct {
// 					NAMING_FAILED string `json:"$"`
// 				} `json:"startAddress"`
// 			} `json:"netBlock"`
// 		} `json:"netBlocks"`
// 		Resources struct {
// 			InaccuracyReportURL string `json:"@inaccuracyReportUrl"`
// 			TermsOfUse          string `json:"@termsOfUse"`
// 			LimitExceeded       struct {
// 				Limit         string `json:"@limit"`
// 				NAMING_FAILED string `json:"$"`
// 			} `json:"limitExceeded"`
// 		} `json:"resources"`
// 		OrgRef struct {
// 			Handle        string `json:"@handle"`
// 			Name          string `json:"@name"`
// 			NAMING_FAILED string `json:"$"`
// 		} `json:"orgRef"`
// 		ParentNetRef struct {
// 			Handle        string `json:"@handle"`
// 			Name          string `json:"@name"`
// 			NAMING_FAILED string `json:"$"`
// 		} `json:"parentNetRef"`
// 		Comment struct {
// 			Line []struct {
// 				Number        string `json:"@number"`
// 				NAMING_FAILED string `json:"$"`
// 			} `json:"line"`
// 		} `json:"comment"`
// 		StartAddress struct {
// 			NAMING_FAILED string `json:"$"`
// 		} `json:"startAddress"`
// 		UpdateDate struct {
// 			NAMING_FAILED string `json:"$"`
// 		} `json:"updateDate"`
// 		Version struct {
// 			NAMING_FAILED string `json:"$"`
// 		} `json:"version"`
// 	} `json:"net"`
// }

func main() {
	tests := []string{
		"8.8.8.8",
		"192.0.2.0",
	}

	// Clients must follow redirects // RFC 7480 Section 5.2
	// error on 404, try and parse resp.Body still // RFC 7480 Section 5.3
	// 429 status, return Retry-After header // RFC 7480 Section 5.5

	// /ip/$ip[/24] // cidr

	for i := range tests {
		ip := tests[i]

		// Allow any http.Client instance
		// RFC 7481 Section 3.2
		// "Clients MUST support both (Basic or Digest auth) to interoperate with
		// servers that support one or the other."
		// Clients can auth with X.509 certificates, SAML, OpenID, OAuth, etc..

		// RFC 7481 Section 3.5
		// "It is also possible to encrypt discrete objects (such as command path
		// segments and JSON-encoded response objects) at one endpoint"
		// offer body as io.Reader ?

		// RFC 7481 Section 3.5
		// As noted in Section 3.2, the HTTP "basic" authentication scheme can
		// be used to authenticate a client.  When this scheme is used, HTTP
		// over TLS MUST be used to protect the client's credentials from
		// disclosure while in transit.

		// RFC 7483 Section 5.1
		// The entity object class uses jCard [RFC7095] to represent contact
		// information, such as postal addresses, email addresses, phone numbers
		// and names of organizations and individuals.

		req, err := http.NewRequest("GET", DefaultServer + fmt.Sprintf("/ip/%s", ip), nil)
		if err != nil {
			panic(err)
		}

		// RFC 7480 Section 4.2
		// either can be used
		//
		// RFC 7483 Section 10.1
		// application/rdap+json
		req.Header.Set("Accept", "application/json")

		resp, err := http.DefaultClient.Do(req)
		if err != nil {
			panic(err)
		}
		defer resp.Body.Close()

		// fmt.Println(resp.Header)
		// if v := resp.Header.Get("Location"); v != "" {
		// 	fmt.Printf("Location: %s\n", v)
		// }

		bs, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			panic(err)
		}
		fmt.Printf("%s\n%s\n\n", ip, bs)
	}
}

// RFC 7482 Section
// "Servers MUST return an HTTP 501 (Not Implemented) [RFC7231] response to
// inform clients ofunsupported query types."

// RFC 7482 Section 3.1
// o  'ip': Used to identify IP networks and associated data referenced
//    using either an IPv4 or IPv6 address.

// o  'autnum': Used to identify Autonomous System number registrations
//    and associated data referenced using an asplain Autonomous System
//    number.

// o  'domain': Used to identify reverse DNS (RIR) or domain name (DNR)
//    information and associated data referenced using a fully qualified
//    domain name.

// o  'nameserver': Used to identify a nameserver information query
//    using a host name.

// o  'entity': Used to identify an entity information query using a
//    string identifier.

type Client struct {
	underlying *http.Client
}

// RFC 7482 3.1.1.  IP Network Path Segment Specification
//    Syntax: ip/<IP address> or ip/<CIDR prefix>/<CIDR length>
//
// IPv4 dotted decimal or IPv6 [RFC5952] address OR
// an IPv4 or IPv6 Classless Inter-domain Routing (CIDR) [RFC4632] notation address block (i.e., XXX/YY)
func (c *Client) IP() {}

// RFC 7482 3.1.2.  Autonomous System Path Segment Specification
//    Syntax: autnum/<autonomous system number>
//
// /autnum/XXX/ ... where XXX is an asplain Autonomous System number [RFC5396]
func (c *Client) Autnum() {}

// RFC 7482 3.1.3.  Domain Path Segment Specification
//    Syntax: domain/<domain name>
//
// Queries for domain information are of the form /domain/XXXX/...,
// where XXXX is a fully qualified (relative to the root) domain name
// (as specified in [RFC0952] and [RFC1123]) in either the in-addr.arpa
// or ip6.arpa zones (for RIRs) or a fully qualified domain name in a
// zone administered by the server operator (for DNRs).
//
// Internationalized Domain Names (IDNs) represented in either A-label
// or U-label format [RFC5890] are also valid domain names.
func (c *Client) Domain() {}

// RFC 7482 3.1.4.  Nameserver Path Segment Specification
//    Syntax: nameserver/<nameserver name>
//
// The <nameserver name> parameter represents a fully qualified host
// name as specified in [RFC0952] and [RFC1123].  Internationalized
// names represented in either A-label or U-label format [RFC5890] are
// also valid nameserver names.
func (c *Client) Nameserver() {}

// RFC 7482 3.1.5.  Entity Path Segment Specification
//    Syntax: entity/<handle>
//
// The <handle> parameter represents an entity (such as a contact,
// registrant, or registrar) identifier whose syntax is specific to the
// registration provider.  For example, for some DNRs, contact
// identifiers are specified in [RFC5730] and [RFC5733].
func (c *Client) Entity() {}

// RFC 7482 3.1.6.  Help Path Segment Specification
//    Syntax: help
// The help path segment can be used to request helpful information
// (command syntax, terms of service, privacy policy, rate-limiting
// policy, supported authentication methods, supported extensions,
// technical support contact, etc.) from an RDAP server.
func (c *Client) Help() {}
// RFC 7483 Section 7
// The appropriate response to /help queries as defined by [RFC7482] is
// to use the notices structure as defined in Section 4.3.

// RFC 7482 3.2.1 Domain Search
//
// /domains?name=XXXX
// XXXX is a search pattern representing a domain name in "letters,
// digits, hyphen" (LDH) format [RFC5890] in a zone administered by the
// server operator of a DNR.
//
// Searches for domain information by nameserver name are specified
// using this form:
// /domains?nsLdhName=YYYY
// YYYY is a search pattern representing a host name in "letters,
// digits, hyphen" format [RFC5890] in a zone administered by the server
// operator of a DNR.
//
// Searches for domain information by nameserver IP address are
// specified using this form:
// /domains?nsIp=ZZZZ
// ZZZZ is a search pattern representing an IPv4 [RFC1166] or IPv6
// [RFC5952] address.
//
// RFC 7483 Section 6
// for /domains searches, the array is "domainSearchResults"



// RFC 7482 3.2.2.  Nameserver Search
// Syntax: nameservers?name=<nameserver search pattern>
// Syntax: nameservers?ip=<nameserver search pattern>
//
// RFC 7483 Section 6
// for /nameservers searches, the array is "nameserverSearchResults"


// RFC 7482 3.2.3.  Entity Search
// Syntax: entities?fn=<entity name search pattern>
// Syntax: entities?handle=<entity handle search pattern>
//
// entities?fn=XXXX
// XXXX is a search pattern representing the "FN" property of an entity
// (such as a contact, registrant, or registrar) name as specified in
// Section 5.1 of [RFC7483].
//
// entities?handle=XXXX
// XXXX is a search pattern representing an entity (such as a contact,
// registrant, or registrar) identifier whose syntax is specific to the
// registration provider.
//
// RFC 7483 Section 6
// for /entities searches, the array is "entitySearchResults"


// JSON

// RFC 7483 Section 2.1
// Clients processing JSON responses need to be prepared for members
// representing registration data specified in this document to be
// absent from a response.  In other words, servers are free to not
// include JSON members containing registration data based on their own
// policies.
//
// Insertion of unrecognized members ignored by clients may also be used
// for future revisions to this specification.
//
// Finally, all JSON names specified in this document are case
// sensitive.  Both servers and clients MUST transmit and process them
// using the specified character case.

// 4.2.  Links
//
//    The "links" array is found in data structures to signify links to
//    other resources on the Internet.  The relationship of these links is
//    defined by the IANA registry described by [RFC5988].
//
//    The following is an example of the link structure:
//
//        {
//          "value" : "http://example.com/context_uri",
//          "rel" : "self",
//          "href" : "http://example.com/target_uri",
//          "hreflang" : [ "en", "ch" ],
//          "title" : "title",
//          "media" : "screen",
//          "type" : "application/json"
//        }

// 4.6.  Status
//    This data structure, named "status", is an array of strings
//    indicating the state of a registered object (see Section 10.2.2 for a
//    list of values).
//
// Value: validated
// Type: status
// Description: Signifies that the data of the object instance has
//    been found to be accurate.  This type of status is usually
//    found on entity object instances to note the validity of
//    identifying contact information.
//
// Value: renew prohibited
// Type: status
// Description: Renewal or reregistration of the object instance is
//    forbidden.
//
// Value: update prohibited
// Type: status
// Description: Updates to the object instance are forbidden.
//
// Value: transfer prohibited
// Type: status
// Description: Transfers of the registration from one registrar to
//    another are forbidden.  This type of status normally applies to
//    DNR domain names.
//
// Value: delete prohibited
// Type: status
// Description: Deletion of the registration of the object instance
//    is forbidden.  This type of status normally applies to DNR
//    domain names.
//
// Value: proxy
// Type: status
// Description: The registration of the object instance has been
//    performed by a third party.  This is most commonly applied to
//    entities.
//
// Value: private
// Type: status
// Description: The information of the object instance is not
//    designated for public consumption.  This is most commonly
//    applied to entities.
//
// Value: removed
// Type: status
// Description: Some of the information of the object instance has
//    not been made available and has been removed.  This is most
//    commonly applied to entities.
//
// Value: obscured
// Type: status
// Description: Some of the information of the object instance has
//    been altered for the purposes of not readily revealing the
//    actual information of the object instance.  This is most
//    commonly applied to entities.
//
// Value: associated
// Type: status
// Description: The object instance is associated with other object
//    instances in the registry.  This is most commonly used to
//    signify that a nameserver is associated with a domain or that
//    an entity is associated with a network resource or domain.
//
// Value: active
// Type: status
// Description: The object instance is in use.  For domain names, it
//    signifies that the domain name is published in DNS.  For
//    network and autnum registrations, it signifies that they are
//    allocated or assigned for use in operational networks.  This
//    maps to the "OK" status of the Extensible Provisioning Protocol
//    (EPP) [RFC5730] .
//
// Value: inactive
// Type: status
// Description: The object instance is not in use.  See "active".
//
//
// Value: locked
// Type: status
// Description: Changes to the object instance cannot be made,
//    including the association of other object instances.
//
// Value: pending create
// Type: status
// Description: A request has been received for the creation of the
//    object instance, but this action is not yet complete.
//
//
// Value: pending renew
// Type: status
// Description: A request has been received for the renewal of the
//    object instance, but this action is not yet complete.
//
// Value: pending transfer
// Type: status
// Description: A request has been received for the transfer of the
//    object instance, but this action is not yet complete.
//
// Value: pending update
// Type: status
// Description: A request has been received for the update or
//    modification of the object instance, but this action is not yet
//    complete.
//
// Value: pending delete
// Type: status
// Description: A request has been received for the deletion or
//    removal of the object instance, but this action is not yet
//    complete.  For domains, this might mean that the name is no
//    longer published in DNS but has not yet been purged from the
//    registry database.

// RFC 7483 Section 4.9
// An objectClassName is REQUIRED in all RDAP response objects so that
// the type of the object can be interpreted.

// RFC 7483 Section 5.1
// See rfc-7483-section-5-1-example.json
type Entity struct {
	Handle string
	Title string
	// Role // RFC 7483 Section 10.2.4
	// Addresses []...
	// Telephone []...
	Emails []string
	// Coordinates []..
	// Status

	// "ldhName" : "ns1.example.com" // TODO(adam): Required?
	// a string containing the LDH name of the nameserver (see Section 3)
	//
	// LDH names:        Textual representations of DNS names where the
	// labels of the domain are all "letters, digits,
	// hyphen" labels as described by [RFC5890].  Trailing
	// periods are optional.

	// "objectClassName" : "entity"
}

// RFC 7483 Section 5.2
// See rfc-7483-section-5-2-example.json
type Nameserver struct {
	// objectClassName -- the string "nameserver"

	Handle string
	// Status
	// IPV4Addresses []net.IP
	// IPV6Addresses []...
}

// RFC 7483 Section 5.3
// See rfc-7483-section-5-3-example.json
type Domain struct {
	// objectClassName -- the string "domain"

	//   handle -- a string representing a registry unique identifier of
	// the domain object instance

	//   ldhName -- a string describing a domain name in LDH form as
	// described in Section 3

	// o  secureDNS -- an object with the following members:
	//   *  zoneSigned -- true if the zone has been signed, false
	//      otherwise.

	// entities -- an array of entity objects as defined by Section 5.1

	// status -- see Section 4.6

	// network -- represents the IP network for which a reverse DNS
	// domain is referenced.  See Section 5.4
}

// RFC 7483 Section 5.4
// See rfc-7483-section-5-4-example.json
type IPNetwork struct {
	// "objectClassName" : "ip network",
	// "handle" : "XXXX-RIR",
	// "startAddress" : "2001:db8::",
	// "endAddress" : "2001:db8:0:ffff:ffff:ffff:ffff:ffff",

	// "ipVersion" : "v6",
	// ipVersion -- a string signifying the IP protocol version of the
	// network: "v4" signifies an IPv4 network, and "v6" signifies an
	// IPv6 network

	// "name": "NET-RTR-1",

	// "type" : "DIRECT ALLOCATION",
	// type -- a string containing an RIR-specific classification of the
	// network

	// "country" : "AU",
	// status
}

// RFC 7483 Section 5.5
// See rfc-7483-section-5-5-example.json
type Autnum struct {
	// objectClassName -- the string "autnum"

	// handle -- a string representing an RIR-unique identifier of the
	// autnum registration

	// o  startAutnum -- a number representing the starting number [RFC5396]
	// in the block of Autonomous System numbers

	// o  endAutnum -- a number representing the ending number [RFC5396] in
	// the block of Autonomous System numbers

	// o  name -- an identifier assigned to the autnum registration by the
	// registration holder

	// o  type -- a string containing an RIR-specific classification of the
	// autnum

	// o  status -- an array of strings indicating the state of the autnum

	// o  country -- a string containing the name of the two-character
	// country code of the autnum
}

// RFC 7483 Section 6
// See rfc-7483-section-6-example.json
type Error struct {
	// {
	// 	"errorCode": 418,
	// 	"title": "Your Beverage Choice is Not Available",
	// 	"description":
	// 	[
	// 		"I know coffee has more ummppphhh.",
	// 		"Sorry, dude!"
	// 	]
	// }
}

// TODO(adam): RFC 7484
// Finding the Authoritative Registration Data (RDAP) Service
// https://data.iana.org/rdap/
